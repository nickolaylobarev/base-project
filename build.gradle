plugins {
    id 'java-library'
    id 'checkstyle'
    id 'io.qameta.allure' version '2.12.0'
    id 'io.freefair.lombok' version '8.11'
    id 'org.gradle.test-retry' version '1.6.0'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

ext {
    allureVersion = '2.28.1'
    junitVersion = '5.10.2'
    jmeterVersion = '1.29.1'
}

repositories {
    mavenCentral()
}

tasks.test {
    useJUnitPlatform()
}

allprojects {
    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = '10.21.1'
        configFile = rootProject.file("src/main/resources/checkstyle.xml")
        ignoreFailures = false
        maxWarnings = 0
        maxErrors = 0
    }
}

dependencies {
    api 'org.slf4j:slf4j-api:2.0.16'
    api 'ch.qos.logback:logback-classic:1.5.15'
    api "io.qameta.allure:allure-java-commons:$allureVersion"
    api "io.qameta.allure:allure-junit5:$allureVersion"
    api 'io.rest-assured:rest-assured:5.5.0'
    api 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    api 'org.awaitility:awaitility:4.2.2'
    api platform("org.junit:junit-bom:$junitVersion")
    api 'org.junit.jupiter:junit-jupiter'
    api 'com.tngtech.archunit:archunit-junit5:1.3.0'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.qameta.allure'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'org.gradle.test-retry'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.junit.platform:junit-platform-launcher:1.10.2'
        runtimeOnly 'org.aspectj:aspectjweaver:1.9.22.1'
    }

    tasks.test {
        retry {
            maxRetries = 3
        }

        useJUnitPlatform {
            if (project.hasProperty("includeTags")) {
                includeTags(project.properties.get("includeTags").toString())
            }
            if (project.hasProperty("excludeTags")) {
                excludeTags(project.properties.get("excludeTags").toString())
            }
        }

        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }

        systemProperty 'allure.results.directory', '.allure-results'
    }

    tasks.allureReport {
        dependencies {
            allureRawResultElements(files('.allure-results'))
        }
    }
}
